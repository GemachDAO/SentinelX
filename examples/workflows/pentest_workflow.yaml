# Web Application Penetration Testing Workflow
# Comprehensive web application security assessment

workflow:
  name: "Web Application Penetration Test"
  version: "1.0.0"
  description: "Comprehensive web application security assessment workflow"
  author: "SentinelX Red Team"
  
  # Global variables
  variables:
    target_url: "${TARGET_URL}"
    output_dir: "./pentest_results"
    depth: 3
    threads: 10
    timeout: 300
    
  # Workflow configuration
  config:
    max_parallel: 3
    timeout: 3600  # 1 hour total
    retry_failed: false
    continue_on_error: true
    
  # Pre-execution checks
  prerequisites:
    - check: "url_accessible"
      target: "${target_url}"
      message: "Target URL must be accessible"
    - check: "directory_writable"
      target: "${output_dir}"
      message: "Output directory must be writable"
    - check: "not_production"
      target: "${target_url}"
      message: "Do not run against production systems without authorization"
  
  # Workflow steps
  steps:
    # Step 1: Reconnaissance
    - name: "reconnaissance"
      task: "web-recon"
      description: "Web application reconnaissance and information gathering"
      parameters:
        target: "${target_url}"
        depth: "${depth}"
        discover_subdomains: true
        technology_detection: true
        output_file: "${output_dir}/recon_results.json"
      timeout: 600
      
    # Step 2: Directory and file discovery
    - name: "directory_discovery"
      task: "dir-discovery"
      description: "Directory and file discovery"
      parameters:
        target: "${target_url}"
        wordlist: "common"
        threads: "${threads}"
        recursive: true
        output_file: "${output_dir}/directories.txt"
      timeout: 900
      parallel_with: ["reconnaissance"]
      
    # Step 3: Vulnerability scanning
    - name: "vulnerability_scan"
      task: "web-vuln-scan"
      description: "Automated vulnerability scanning"
      parameters:
        target: "${target_url}"
        scan_type: "comprehensive"
        include_owasp_top10: true
        output_file: "${output_dir}/vulnerabilities.json"
      depends_on: ["reconnaissance"]
      timeout: 1200
      
    # Step 4: SQL injection testing
    - name: "sql_injection_test"
      task: "fuzzer"
      description: "SQL injection vulnerability testing"
      parameters:
        target: "${target_url}"
        type: "sql"
        iterations: 100
        payloads: "sql_injection"
        discovered_params: "${reconnaissance.results.parameters}"
        output_file: "${output_dir}/sqli_results.json"
      depends_on: ["reconnaissance"]
      timeout: 600
      
    # Step 5: XSS testing
    - name: "xss_test"
      task: "fuzzer"
      description: "Cross-site scripting (XSS) testing"
      parameters:
        target: "${target_url}"
        type: "xss"
        iterations: 100
        payloads: "xss_vectors"
        discovered_params: "${reconnaissance.results.parameters}"
        output_file: "${output_dir}/xss_results.json"
      depends_on: ["reconnaissance"]
      timeout: 600
      parallel_with: ["sql_injection_test"]
      
    # Step 6: Authentication testing
    - name: "auth_test"
      task: "auth-bypass"
      description: "Authentication and authorization testing"
      parameters:
        target: "${target_url}"
        test_types: ["bypass", "brute_force", "privilege_escalation"]
        discovered_endpoints: "${reconnaissance.results.endpoints}"
        output_file: "${output_dir}/auth_results.json"
      depends_on: ["reconnaissance"]
      timeout: 900
      
    # Step 7: Business logic testing
    - name: "business_logic_test"
      task: "business-logic"
      description: "Business logic vulnerability testing"
      parameters:
        target: "${target_url}"
        test_scenarios: ["race_conditions", "workflow_bypass", "price_manipulation"]
        application_flows: "${reconnaissance.results.workflows}"
        output_file: "${output_dir}/business_logic_results.json"
      depends_on: ["reconnaissance", "auth_test"]
      timeout: 1200
      
    # Step 8: API security testing (if APIs detected)
    - name: "api_security_test"
      task: "api-security"
      description: "API security assessment"
      parameters:
        target: "${target_url}"
        api_endpoints: "${reconnaissance.results.api_endpoints}"
        test_types: ["injection", "broken_auth", "data_exposure"]
        output_file: "${output_dir}/api_security_results.json"
      depends_on: ["reconnaissance"]
      timeout: 900
      condition: "${reconnaissance.results.has_api_endpoints}"
      
    # Step 9: Generate exploitation report
    - name: "exploitation_report"
      task: "exploit-report"
      description: "Generate exploitation scenarios and proof-of-concepts"
      parameters:
        vulnerabilities: [
          "${vulnerability_scan.results.findings}",
          "${sql_injection_test.results.findings}",
          "${xss_test.results.findings}",
          "${auth_test.results.findings}",
          "${business_logic_test.results.findings}"
        ]
        generate_poc: true
        output_file: "${output_dir}/exploitation_report.json"
      depends_on: [
        "vulnerability_scan", 
        "sql_injection_test", 
        "xss_test", 
        "auth_test", 
        "business_logic_test"
      ]
      timeout: 300
      
    # Step 10: Generate comprehensive report
    - name: "generate_pentest_report"
      task: "pentest-report"
      description: "Generate comprehensive penetration testing report"
      parameters:
        template: "web_application_pentest"
        format: "html"
        executive_summary: true
        technical_details: true
        remediation_guidance: true
        output_file: "${output_dir}/pentest_report.html"
        inputs: [
          "${reconnaissance.results}",
          "${directory_discovery.results}",
          "${vulnerability_scan.results}",
          "${sql_injection_test.results}",
          "${xss_test.results}",
          "${auth_test.results}",
          "${business_logic_test.results}",
          "${exploitation_report.results}"
        ]
      depends_on: ["exploitation_report"]
      timeout: 300
      required: true
      
  # Post-execution actions
  post_execution:
    - action: "calculate_risk_score"
      inputs: ["${generate_pentest_report.results}"]
      output: "${output_dir}/risk_assessment.json"
      
    - action: "generate_executive_summary"
      template: "executive_summary"
      input: "${generate_pentest_report.results}"
      output: "${output_dir}/executive_summary.pdf"
      
    - action: "create_remediation_plan"
      vulnerabilities: "${generate_pentest_report.results.vulnerabilities}"
      priority_matrix: "risk_impact"
      output: "${output_dir}/remediation_plan.xlsx"
      
    - action: "archive_results"
      target: "${output_dir}"
      format: "zip"
      filename: "pentest_${timestamp}.zip"
      
    - action: "notify"
      type: "email"
      recipients: ["security@company.com", "dev-team@company.com"]
      subject: "Penetration Test Completed: ${target_url}"
      template: "pentest_notification"
      attach_report: true
      
  # Error handling
  on_failure:
    - action: "log"
      level: "error"
      message: "Penetration test workflow failed: ${error_message}"
      
    - action: "notify"
      type: "slack"
      channel: "#security-alerts"
      message: "⚠️ Pentest workflow failed for ${target_url}: ${error_message}"
      
  # Success actions
  on_success:
    - action: "log"
      message: "Penetration test completed successfully"
      
    - action: "update_metrics"
      metrics:
        pentests_completed: 1
        vulnerabilities_found: "${generate_pentest_report.results.vulnerability_count}"
        
    - action: "schedule_retest"
      target: "${target_url}"
      interval: "quarterly"
      
  # Cleanup
  cleanup:
    - action: "remove_temp_files"
      pattern: "${output_dir}/temp/*"
      
    - action: "anonymize_sensitive_data"
      target: "${output_dir}/logs"

# Workflow metadata
metadata:
  tags: ["pentest", "web-security", "owasp", "vulnerability-assessment"]
  category: "Red Team Operations"
  complexity: "advanced"
  estimated_duration: "45-90 minutes"
  
  # Documentation
  documentation:
    description: |
      Comprehensive web application penetration testing workflow that covers:
      
      1. Reconnaissance and information gathering
      2. Directory and file discovery
      3. Automated vulnerability scanning
      4. SQL injection testing
      5. Cross-site scripting (XSS) testing
      6. Authentication and authorization testing
      7. Business logic vulnerability testing
      8. API security assessment
      9. Exploitation scenario development
      10. Comprehensive reporting
      
      This workflow follows OWASP testing methodologies and industry best practices.
    
    prerequisites:
      - Target authorization and legal permission
      - Web application URL accessible from testing environment
      - Required testing tools installed
      - Network connectivity to target
    
    outputs:
      - Comprehensive penetration test report
      - Executive summary for management
      - Technical vulnerability details
      - Proof-of-concept exploits
      - Remediation recommendations
      - Risk assessment matrix
    
    usage_examples:
      - description: "Basic web application pentest"
        command: "sentinelx workflow run pentest_workflow.yaml -v TARGET_URL=https://example.com"
        
      - description: "Deep penetration test with custom settings"
        command: "sentinelx workflow run pentest_workflow.yaml -v TARGET_URL=https://app.example.com -v depth=5 -v threads=20"
        
      - description: "API-focused security assessment"
        command: "sentinelx workflow run pentest_workflow.yaml -v TARGET_URL=https://api.example.com -v focus=api_security"
    
    security_notes:
      - "Only run against systems you own or have explicit permission to test"
      - "This workflow may generate significant traffic and could impact system performance"
      - "Some tests may trigger security alerts or logging systems"
      - "Ensure compliance with local laws and regulations"
      - "Consider running during maintenance windows for production systems"
